#include "bits/stdc++.h"
#define int long long
#define ull unsigned long long
#define vi vector<int>
#define vvi vector<vi >
#define vb vector<bool>
#define vvb vector<vb >
#define fr(i,n) for(int i=0; i<(n); i++)
#define rep(i,a,n) for(int i=(a); i<=(n); i++)
#define repp(i,a,n) for(int i=(a); i*i<=(n); i++)
#define nl cout<<"\n"
#define dbg(var) cout<<#var<<"="<<var<<" "
#define all(v) v.begin(),v.end()
#define pb     push_back
#define sz(v) (int)(v.size())
#define srt(v)  sort(v.begin(),v.end())         // sort 
#define mxe(v)  *max_element(v.begin(),v.end())     // find max element in vector
#define mne(v)  *min_element(v.begin(),v.end())     // find min element in vector
#define unq(v)  v.resize(distance(v.begin(), unique(v.begin(), v.end())));

using namespace std;
#define bin(x,y)  bitset<y>(x) 
int INF = 998244353;      // Hardcoded, directly change from here for functions!
int MOD = 1e9+7 ;
void modadd(int &a , int b) {a=((a%MOD)+(b%MOD))%MOD;}
void modsub(int &a , int b) {a=((a%MOD)-(b%MOD)+MOD)%MOD;}
void modmul(int &a , int b) {a=((a%MOD)*(b%MOD))%MOD;}

// ================================== take ip/op like vector,pairs directly!==================================
template<typename typC,typename typD> istream &operator>>(istream &cin,pair<typC,typD> &a) { return cin>>a.first>>a.second; }
template<typename typC> istream &operator>>(istream &cin,vector<typC> &a) { for (auto &x:a) cin>>x; return cin; }
template<typename typC,typename typD> ostream &operator<<(ostream &cout,const pair<typC,typD> &a) { return cout<<a.first<<' '<<a.second; }
template<typename typC,typename typD> ostream &operator<<(ostream &cout,const vector<pair<typC,typD>> &a) { for (auto &x:a) cout<<x<<'\n'; return cout; }
template<typename typC> ostream &operator<<(ostream &cout,const vector<typC> &a) { int n=a.size(); if (!n) return cout; cout<<a[0]; for (int i=1; i<n; i++) cout<<' '<<a[i]; return cout; }
// ===================================END Of the input module ==========================================
vi factorial( 2*1e6- 1 , 0);

bool cmp(pair<int,int> a , pair<int , int> b){
	if( (a.second) == (b.second) ){
		return a.first > b.first;
	}
	return (a.second) < (b.second) ;
}
int lcm(int a , int b){
	return  (a * b) / (__gcd(a , b));
}
vector<vector<int>> g;
vector<int> col;
vector<int> par;
int cycle_s , cycle_e , n , m ;
bool dfs(int node , int parent){
    col[node] = 1;
    for(auto neigh : g[node]){
        if(neigh == parent)continue;
        if(col[neigh] == 0){
            par[neigh] = node;
            if(dfs(neigh , node)){
                return true;
            }
        }
        else if(col[node] == 1){
            cycle_e = neigh;
            cycle_s = node;
            return true;
        }
    }
    col[node] = 2;
    return false;
}
void solve(){
    cin>>n>>m;
    g.resize(n);
    col.assign(n, 0);
    par.assign(n,-1);
    cycle_s = -1;
    fr(i , m){
        int x , y;cin>>x>>y;
        x--;
        y--;
        g[x].pb(y);
        g[y].pb(x);
    }
    fr(i,n){
        if(col[i] == 0 && dfs(i , par[i])){
            break;
        }
    }
    if(cycle_s == -1)cout << "NO\n";
    else {
        int count = 0;
        for (int v = cycle_e; v != cycle_s; v = par[v]) count += 1;
        if(count % 2 == 1){cout << "YES\n";}
        else cout << "NO\n";
    }
}
	
int32_t main()
{
 ios_base::sync_with_stdio(false);
 cin.tie(NULL);
    int T = 1;
    //cin >> T;
    for(int i = 1 ; i <= T ; i++)
    {
        solve();
    }
    return 0;
}
